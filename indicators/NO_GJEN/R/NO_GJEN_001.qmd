---
title: "Enchroachment LiDAR"
format: 
  html:
    embed-resources: true
author:
  - name: Ida M. Mienna              # Enter name
    email: ida.mienna@nina.no  # Enter email
    affiliations:
      - id: myID
        name: The Norwegian Institute for Nature Research (NINA) # Enter affiliations
  - name: Zander Venter              #  Enter subsequent authors like this, or remove if not relevant
    affiliations:
      - ref: myID               # To reuse affiliations referecen the id like this
date: May 31, 2024 # Enter date 
callout-icon: false
---

<!--# This is a template for how to document the indicator analyses. Make sure also to not change the order, or modify, the headers, unless you really need to. This is because it easier to read if all the indicators are presented using the same layout. If there is one header where you don't have anything to write, just leave the header as is, and don't write anything below it. If you are providing code, Be careful to annotate and comment on every step in the analysis. Before starting it is recommended to fill in as much as you can in the metadata file. This file will populate the initial table in your output.-->

<!--# Load all you dependencies here -->

```{r setup}
#| include: false
library(knitr)
library(sf)
library(tidyverse)
library(gridExtra)
library(kableExtra)
library(RColorBrewer)
library(flextable)
library(here)

# Set global variable defining whether you want to run everything from scratch (very long runtime) or use pre-exported data (short runtime)
runFromScratch <- FALSE

knitr::opts_chunk$set(echo = TRUE) #message=FALSE, warning=FALSE
```

```{r source}
#| echo: false
source(here::here("R/_common.R"))

here::here()
```

```{r}
#| echo: false
meta <- readxl::read_xlsx("../metadata.xlsx")
st <- meta |>
  filter(Variable == "status") |>
  pull(Value)
version <- meta |>
  filter(Variable == "Version") |>
  pull(Value)
auth <- meta |>
  filter(Variable == "authors") |>
  pull(Value)
year <- meta |>
  filter(Variable == "yearAdded") |>
  pull(Value)
name <- year <- meta |>
  filter(Variable == "indicatorName") |>
  pull(Value)
url <- meta |>
  filter(Variable == "url") |>
  pull(Value)

meta <- meta |>
  mutate(Variable = case_match(Variable,
    "indicatorID" ~ "Indicator ID" ,
    "indicatorName" ~ "Indicator Name",
    "country" ~ "Country",
    "continent" ~ "Continent",
    "ECT" ~ "Ecosystem Condition Typology Class",
    "yearAdded" ~ "Year added",
    "yearLastUpdate" ~ "Last update",
    .default = Variable
   )
  ) |>
  filter(Variable != "authors")

```

<!--# The following parts are autogenertaed. Do not edit. -->

::: {layout-ncol="3"}
```{r}
#| echo: false
#| results: asis
status(st)
```

::: {.callout-note style="background: cornsilk;"}
## Recomended citation

`r paste(auth, year, name, "v.", version, "ecRxiv", url, sep=" ")`
:::

::: {.callout-note style="background: khaki;"}
## Version

`r version`
:::
:::

```{r tbl-meta}
#| tbl-cap: 'Indicator metadata'
#| echo: false
#| warning: false

meta |>
  select(Variable, Value) |>
  kbl(col.names = NULL) 

```

# Gjengroing

<!--# Replace 'indicator name' with your the actual indicator name -->

<br />

<!--# Don't remove these three html lines -->

<br /> <br />

<hr />

<!--# Document you work below.  -->

## 1. Introduction

<!--# Describe the indicator in general terms. It is a good idea to include a bullet point list of the spesific steps in the workflow -->

From [ecosystemCondition](https://github.com/NINAnor/ecosystemCondition/blob/main/gjengroing.Rmd):

"The Norwegian word "gjengroing" is directly translated to "regrowing" in English. The gjengroing indicator describes the regrowth of woody vegetation (trees and bushes) in open ecosystems (wetland, semi- and naturally open areas) across Norway. We will use a spatial reference approach where reference areas define good or optimal vegetation regrowth heights.

The workflow spans two platforms including RStudio and Google Earth Engine (GEE). To reproduce this workflow you will need a GEE account and access to the NINA RStudio and R/GeoSpatialData servers."

## 2. About the underlying data

<!--# Describe the data you have used, it's origin, biases, avaiabilit ect.-->

From [ecosystemCondition](https://github.com/NINAnor/ecosystemCondition/blob/main/gjengroing.Rmd):

"We rely on the following datasets:

-   [Nature type polygons](https://kartkatalog.miljodirektoratet.no/Dataset/Details/2031) are used to identify reference areas with good ecological condition.
-   NIBIO's [AR5](https://kartkatalog.geonorge.no/metadata/arealressurskart-fkb-ar5-arealtyper/280bbd7a-5ce9-4c83-9e15-ac162cabd8a6) is used as the population sample for each ecosystem type. The population sample are the areas used to determine ecological condition relative to the reference areas. We also use the AR5 data to identify forest surrounding the population polygons for defining the lower limit of ecological condition index (i.e.. poor condition),
-   LiDAR-derived digital elevation model from Kartverket's [høydedata](https://hoydedata.no/LaserInnsyn/). This includes both a terrain (DTM) and surface model (DSM). We calculate the canopy height model (DSM - DTM) to get the height of objects above the ground. From this we remove buildings, and what remains is vegetation - mostly trees but also some bushes or smaller woody plants.
-   Kartverket's [national 10m elevation model](https://kartkatalog.geonorge.no/metadata/dtm-10-terrengmodell-utm32/fd851873-f363-46f9-9fc6-bb1b403575df). We use this to stratify reference (good condition) and forest (poor condition) heights by elevational band. This is done in combination with bioclimatic zones - see next point.
-   Moen's [bioclimatic zones](https://artsdatabanken.no/Pages/181901/Bioklimatiske_soner). We use this to stratify reference (good condition) and forest (poor condition) heights by bioclimatic (also referred to as vegetation/climatic) zones.
-   [FKB building footprints](https://kartkatalog.geonorge.no/metadata/fkb-bygning/8b4304ea-4fb0-479c-a24d-fa225e2c6e97) are used to isolate vegetation in the LiDAR height data.
-   A [European satellite-based map](https://www.nature.com/articles/s41893-020-00609-y) of forest clear cuts is used for identifying AR5 forest patches in near-climax successional stages.
-   The [SSB 10km grid](https://kartkatalog.geonorge.no/metadata/statistisk-rutenett-5000m/32ac0653-d95c-446c-8558-bf9b79f4934e) is used for visualization purposes.
-   The regional delineation for Norway (five regions) are used for aggregating and reporting gjengroing condition values."

### 2.1 Spatial and temporal resolution

<!--# Describe the temporal and spatial resolution of the data used-->

From [ecosystemCondition](https://github.com/NINAnor/ecosystemCondition/blob/main/gjengroing.Rmd):

"The index will cover the mainland of Norway. The analysis will be stratified by (1) åpne and (2) våtmark ecosystems. The former includes both semi-naturlig mark and naturlig åpne områder under skoggrensa (due to the fact that AR5 does not differentiate these), and the latter includes våtmark only. The LiDAR data cover a range of years and therefore the indicator represents conditions for circa 2010 to 2021."

"Temporal coverage: Circa 2010 to 2021. This is a single snapshot and not a change analysis. In the future, when LiDAR data has been repeated across the country, it may be possible to do a change assessment. In addition, the use of optical or radar satellite imagery may serve as a proxy for vegetation height using machine learning. This will allow for annual updates, depending on the uncertainty in the satellite-based maps of vegetation height."

### 2.2 Original units

<!--# What are the original units for the most relevant  variables in the data-->

From [ecosystemCondition](https://github.com/NINAnor/ecosystemCondition/blob/main/gjengroing.Rmd):

"The original units for ecological condition are meters. This is the height of the vegetation within referecne, polygon and forest areas."

### 2.3 Additional comments about the dataset

<!--# Text here -->

None?

## 3. Indicator properties

### 3.1. ECT

<!--# Describe the rationale for assigning the indicator to the ECT class -->

ECT: Structural state characteristic

Ecosystem: Våtmark og Semi-/Naturlig-åpne

Egenskap: Funksjonell sammensetning innen trofiske nivåer

### 3.2. Ecosystem condition characteristic

<!--# Describe the ecosystem condition characteristic represneted in the indicator. See 10.3897/oneeco.6.e58218 for information on what these characteristics might be. -->

### 3.3. Other standards

<!--# Add text about other spesific standards, e.g. natinoal standards, and how the indicator relates to these -->

### 3.4. Collinearities with other indicators

<!--# Describe known collinearities with other metrices (indicators or variables) that could become problematic if they were also included in the same Ecosystem Condition Assessment as the indicator described here. -->

From [ecosystemCondition](https://github.com/NINAnor/ecosystemCondition/blob/main/gjengroing.Rmd):

"There is possibly a collinearity with the [primary production indicator](#NDVI-indicator-natopen) (primærproduksjon). The primary production indicator uses the normalized difference vegetation index (NDVI) as a proxy for vegetation production. NDVI can be correlated with vegetation height and consequently yield similar results to the LiDAR-based gjengroing indicator."

## 4. Reference condition and values

### 4. 1. Reference condition

<!--# Define the reference condition (or refer to where it is defined). Note the destinction between reference condition and reference values 10.3897/oneeco.5.e58216  -->

From [ecosystemCondition](https://github.com/NINAnor/ecosystemCondition/blob/main/gjengroing.Rmd):

"The reference state is defined as one where åpne ecosystems are indeed open, with little to no woody encroachment. For natural ecosystems this reflects a state where climate warming, wetland drainage, and alien species etc have not led to any net loss of these nature types and their internal functioning. For semi natural ecosystems it reflects a state where traditional husbandry is keeping he ecosystems open due to grazing and hay making."

### 4. 2. Reference values

#### 4.2.1 Minimum and maximum values

<!--# Describe the reference values used to set the lower and upper limits on the normative indicator scale. Why was the current option chosen and how were the reference values quantified? If the reference values are calculated as part of the analyses further down, please repeat the main information here. -->

From [ecosystemCondition](https://github.com/NINAnor/ecosystemCondition/blob/main/gjengroing.Rmd):

"The methodology used to calculate the *gjengroing* indicator is outlined in the schematic below. The workflow in the schematic is conducted for all reference and population polygons in Norway and repeated for each ecosystem type (åpne and våtmark), respectively. The indicator values are aggregated to a 50km grid and regional level at the end. The individual steps are discussed in turn in the following subsections.

```{r enc-workflow, fig.cap="Schematic illustration of how the encroachment indicator is calculated. The lower bound for poor condition is set by LiDAR heights from mature forest surrounding the population polygon. The upper bound for good condition is set by regional median LiDAR heights within NiN polygons in the same bioclimatic-elevation zone as the population polygon.", out.width='70%', echo=FALSE}
knitr::include_graphics("../img/gjengroing_schematic.jpg")
getwd()
```

The NiN polygons including "Naturlig åpne områder under skoggrensa", "Semi-naturlig mark", and "Våtmark" with good ecological condition are used to define a reference gjengroing state. We use the aggregated "Tilstand" variable assigned to each NiN polygon. The 50th percentile of LiDAR-derived vegetation heights within these polygons is used to define the upper limit (ie. 1) of the scaled indicator value. We cannot define local reference values based on proximity, because the NiN polygons are spatially biased and not close to all AR5 population polygons. Therefore we calculate regional reference values using elevation (300m bands) and bioclimatic zones as stratification. We calculate the mean reference value for each unique combination of elevation-bioclimatic zone. When calculating the index for each population polygon, the reference value is inherited from the elevation-bioclimatic zone it falls within.

Once we have the reference vegetation height for a given ecosystem type and elevation-bioclimatic zone, we need to define the minimum (or worst/bad) condition. We use the 50th percentile of LiDAR-derived vegetation heights within AR5 skog polygons to define a climax vegetation successional stage where gjengroing is at its most extreme. In order not to include forest patches that have recently been harvested, we mask out any forest which has been clear-cut since 1986. Here, 1986 is a hard limit defined by the clear-cut dataset which was based on Landsat imagery. Therefore we can be assured that we are measuring forest that is at least 35 years old.

We use both local and regional "reference" approaches to defining poor ecological condition. To do this we calculate the forest heights in AR5 forest patches that fall within 200m of a population polygon (local reference). For population polygons that do not have forest within their proximity, we use the mean forest height within the unique elevation-bioblimatic zone the population falls within (regional reference).

To define the ecological condition of the population polygon, we measure 50th percentile of LiDAR-derived vegetation height. As a reminder, we use AR5 polygons that have types that are approximately compatible with the NiN ecosystem types. For våtmark we use the AR5 polygons defined as "Myr". For åpne ecosystems we use the AR5 polygons defined as either "Åpent fastmark" or "Innmarksbeite".

We acknowledge that the AR5 data set has several shortcomings in terms of lags in update frequency and with precision in the maps themselves. This indicator will therefore benefit strongly from new ecosystem delineation maps, that update more frequently, and preferably once that can differentiate between semi-natural and naturally open ecosystems.

The vegetation height percentiles are then scaled to between 0 and 1 using a sigmoid transformation [Oliver at al. (2021)](https://www.sciencedirect.com/science/article/pii/S1470160X21000066).

"

#### 4.2.2. Threshold value for defining *good ecological condition (if relevant)*

<!--# Describe the different reference values here and the justification for using these -->

#### 4.2.3. Spatial resolution and validity

<!--# Describe the spatial resolution of the reference values. E.g. is it defined as a fixed value for all areas, or does it vary. Also, at what spatial scale is the reference values valid? For example, if the reference value has a regional resolution (varies between regions), it might mean that it is only valid and correct to use for scaling local variable values that are first aggregated to regional scale. However, sometimes the reference value is insensitive to this and can be used to scale variables at the local (e.g. plot) scale.  -->

## 5. Uncertainties

<!--# Describe the main uncertainties or sources of error in the indicator or the underlying data. -->

"For the indicator map at the polygon level there is no uncertainty associated with the indicator values. For aggregated indicator values (e.g. for 50km grid and regions), the uncertainty in the indicator value is calculated from the spatial variation in the polygon-level reference height values. We could use the alternative of calculating the spatial variation in the indicator values via bootstrapping using the EAtools package. However, given the extreme number of population polygons, the uncertainty values are extremely small and therefore we choose to use the standard deviation in reference vegetation heights, converted to the indicator scale."

## 6. References

<!--# You can add references manually or use a citation manager and add intext citations as with crossreferencing and hyperlinks. See https://quarto.org/docs/authoring/footnotes-and-citations.html -->

Links to data and resources are provided with hyperlinks in-line.

## 7. Datasets

<!--# Describe the unique datasets seperately under seperate headers (Dataset A, Dataset B, etc.-->

"There are several datasets which are used in GEE which will not be imported into the R session here. These datasets have been obtained from the source and ingested into GEE by Zander Venter or Vegar Bakkestuen with the help of Miljødata section at NINA. They include

-   [AR5](https://kartkatalog.geonorge.no/metadata/arealressurskart-fkb-ar5-arealtyper/280bbd7a-5ce9-4c83-9e15-ac162cabd8a6) (!! USE GRUNNKART INSTEAD)
-   [LiDAR-derived digital elevation model from høydedata](https://hoydedata.no/LaserInnsyn/).
-   [Kartverket's national 10m elevation model](https://kartkatalog.geonorge.no/metadata/dtm-10-terrengmodell-utm32/fd851873-f363-46f9-9fc6-bb1b403575df)
-   [FKB building footprints](https://kartkatalog.geonorge.no/metadata/fkb-bygning/8b4304ea-4fb0-479c-a24d-fa225e2c6e97)
-   [European forest clear-cut map](https://www.nature.com/articles/s41893-020-00609-y)

The remaining datasets will be imported into the R session.

"

### 7.1 Regions

<!--# Describe the main dataset, typicaly the one containing the variable of (most) interest. Change the header from Dataset A to the name of the actuall dataset. -->

"

The regional delineation for Norway (five regions) are used for aggregating and reporting gjengroing condition values.

```{r}

regions <- sf::st_read("../data/regions.shp") %>%
  mutate(region = factor(region))

```

"

### 7.2 SSB 10 and 50km grids

<!--# Describe additional datasets in a similar was as above. Deleteor add ned subheaders as needed. -->

"

The [SSB 10km and 50km grids](https://kartkatalog.geonorge.no/metadata/statistisk-rutenett-5000m/32ac0653-d95c-446c-8558-bf9b79f4934e) are used for visualizing the distribution of available data and for aggregating gjengroing index scores.

```{r}
ssb10km <- st_read('/data/R/GeoSpatialData/Population_demography/Norway_SSB/Original/ssb_10km/ssb10km.shp')%>%
  # mutate the id value so that it aligns with the data coming from GEE
  mutate(SSBID = as.numeric(SSBID)/1000)
# Transform to the correct projection
ssb10km <- st_transform(ssb10km, st_crs(regions))

ssb50km <- st_read('/data/R/GeoSpatialData/Population_demography/Norway_SSB/Original/ssb_50km/ssb50km.shp')%>%
  # mutate the id value so that it aligns with the data coming from GEE
  mutate(SSBID = as.numeric(SSBID)/1000)
# Transform to the correct projection
ssb50km <- st_transform(ssb50km, st_crs(regions))
```

"

### 7.3 Bioclimatic regions

The [Moen's bioclimatic regions](https://data.artsdatabanken.no//Natur_i_Norge/Natursystem/Beskrivelsessystem/Regional_naturvariasjon/Bioklimatisk_sone) are imported from NINA R/GeoSpatialData/ server.

```{r}

bioclim <- st_read('/data/R/GeoSpatialData/BiogeographicalRegions/Norway_PCA_klima/Converted/Soner2017.shp')
bioclim <- st_transform(bioclim, "EPSG:4326")

# The file is in tiles. Will therefore dissolve these by Sone_navn
bioclim <- bioclim %>%
  group_by(Sone_navn) %>%
  summarise(geometry = st_union(geometry))

# Add unique code for each name called KLASSE
bioclim <- bioclim %>%
  mutate(KLASSE=as.numeric(as.factor(Sone_navn))) %>%
  rename(NAVN="Sone_navn")

# Export the file
st_write(bioclim, '../data/bioclimreg.shp', append=FALSE)

```

### 7.4 NiN polygons

[NiN polygons](https://kartkatalog.miljodirektoratet.no/dataset/Details/2031) are imported here from the NINA servers:

```{r}

# Function to extra hovedtype
extract_hovedtype <- function(text) {
  matches <- str_match_all(text, "NA_(.*?)-")
  unique(matches[[1]][, 2])
}

nin <- st_read('/data/R/GeoSpatialData/Habitats_biotopes/Norway_Miljodirektoratet_Naturtyper_nin/Original/Naturtyper - Miljødirektoratets instruks/Naturtyper_nin_0000_norge_25833_FILEGDB.gdb', layer="naturtyper_nin_omr") %>%
  # Fix any invalid geometries
  mutate(validGeo = st_is_valid(SHAPE)) %>%
  filter(validGeo) %>%
  # Simplify ecosystem names
  mutate(hovedøkosystem = recode(hovedøkosystem, 
                                 "våtmark" = 'Vaatmark',
                                 "skog" = "Skog",
                                 "fjell" = "Fjell",
                                 "semi-naturligMark" = 'Semi-naturlig',
                                 "naturligÅpneOmråderILavlandet" = 'Naturlig aapne',
                                 "naturligÅpneOmråderUnderSkoggrensa" = 'Naturlig aapne'))

# Transform crs
nin <-st_transform(nin, "EPSG:4326")

# We need to filter out the ecosystems we are not interested in.First, we only include types that are non-alpine by removing the areas that overlap with the bioclimatic zone 'Lavalpin sone (LA)'.
nin <- st_difference(nin, bioclim[bioclim$NAVN == "Lavalpin sone (LA)",])

# Not all alpine types do overlap with this bioclimatic zone due to the resolution of the bioclimatic zone dataset. Thus, we further need to remove these types. In addition, we remove forested wetland types and semi-natural types.
nin <- nin %>%
  filter(!(hovedøkosystem %in% c('Skog','Fjell'))) %>% # Remove forest and alpine ecosystem types
  filter(!(naturtype %in% c('Åpen myrflate i lavalpin sone'))) %>% # Alpine
  filter(!(naturtype %in% c('Hule eiker', # Naturetypes that can have a good condition but has a tree cover >10%
                            'Hagemark',
                            'Lauveng',
                            'Saltpåvirket strand- og sumpskogsmark',
                            'Flommyr, myrkant og myrskogsmark',
                            'Grankildeskog',
                            'Svak kilde og kildeskogsmark',
                            'Sørlig kaldkilde',
                            'Varmekjær kildelauvskog',
                            'Gammel fattig sumpskog',
                            'Rik gransumpskog',
                            'Rik svartorsumpskog',
                            'Kilde-edellauvskog',
                            'Rik gråorsumpskog',
                            'Kalkrik myr- og sumpskogsmark',
                            'Rik vierstrandskog',
                            'Rik svartorstrandskog',
                            'Saltpåvirket svartorstrandskog',
                            'Leirravine' # This type is often not open
                            ))) %>%
  # Get the main ecosystem codes. As there are multiple types in a column, we need to use a function (see above)
  mutate(hovedtype = sapply(ninKartleggingsenheter, function(x) paste(extract_hovedtype(x), collapse = ",")),
         id = identifikasjon_lokalId) %>%
  # Drop polygons with no condition score
  drop_na(tilstand) %>%
  # Only included specific columns
  dplyr::select(id, hovedøkosystem, hovedtype, naturtypeKode, tilstand)
```

-   **Export the cleaned NiN data and upload to GEE before proceeding**

```{r}
# Only run if you are repeating this workflow for the first time
nin %>%
   dplyr::select(id, hovedøkosystem, tilstand) %>%
   st_transform("EPSG:4326") %>%
   st_write('../data/nin_cleaned.shp', append=FALSE)
```

-   **Now run the following GEE JavaScript code by clicking on the hyperlink:** [GEE script](https://code.earthengine.google.com/25736c6d4f73298e30283ce9b41ab240) (updated script). This script is also found in the SCR repository as "GEE_script.js". When you run the script, then click the Tasks tab in the GEE code editor and run the export tasks. The export files will appear in your Google Drive. Download the files from your Google Drive to the /data/gjengroing/From_GEE directory. This script extracts three CSV files:
    -   'area_cover_grid.csv' - this gives the area coverage of NiN, AR5 and LiDAR data for each 10x10km SSB grid cell.
    -   'elevation_stratified.shp' - this is a 300m elevation band stratification that is simply used for visualizing the strata here in R.
    -   'vegHeights.zip' - this is a folder with hundreds of CSV files. These files contain the vegetation heights for reference, population, and forest polygons over Norway. The exports were split by 50km grid to prevent hitting user memory limits in GEE. Unzip the folder before you upload to ./DATA/From_GEE/

### 7.5 Data from Google Earth Engine

Once you have run the GEE script above, and downloaded the data to the `/From_GEE/` directory, you can proceed with this R workflow.

Create functions to import vegetation height files and stratify data by bioclimatic zone and region.

```{r}
# Function to read in multiple files resulting from GEE exports
readVegHeightFiles <- function(uniqueString){
  dir <- '/data/P-Prosjekter2/412421_okologisk_tilstand_2024/Ida/From_GEE/vegHeights/'
  files <- list.files(dir)[str_detect(list.files(dir), uniqueString)]
  #print(files)
  
  dat <- tibble()
  for (i in files){
    dat <- dat %>% 
      bind_rows(read_csv(paste0(dir, i)) %>%
                  mutate(ssbid = substr(str_split(i, '_')[[1]][3], 1, 14)))
  }
  return (dat)
}

# Vegetation type lookup
vegLookup <- tibble(
  vegClimZone = c(1,2,3,4,5), 
  vegClimZoneLab = c('Boreonemoral sone (BN)','Lavalpin sone (LA)','Mellomboreal sone (MB)','Nordboreal sone (NB)','Sørboreal sone (SB)')
  )

# Bioclimatic zone and region cleaning function
cleanRegClim <- function(data){
  
  dataOut <- data %>%
    mutate(region=ifelse(region_id == 1, 'Nord-Norge',
                         ifelse(region_id == 2, 'Midt-Norge',
                                ifelse(region_id == 3, 'Østlandet',
                                       ifelse(region_id == 4, 'Vestlandet', 'Sørlandet'))))) %>%

    mutate(vegClimZone = round(vegClimZone)) %>%
    left_join(vegLookup, by = 'vegClimZone') %>%
    dplyr::select(-region_id, -vegClimZone) %>%
    drop_na(vegClimZoneLab, region)
  
  return (dataOut)
  
}
```

Import the CSV files generated in GEE related to area covers:

```{r}

# Import data coverages per SSB 10km grid cell
areaCovers <- read_csv('/data/P-Prosjekter2/412421_okologisk_tilstand_2024/Ida/From_GEE/area_cover_grid.csv') %>%
  dplyr::select(-'.geo', -'system:index')

# Calculate percentage cover relative to the land area in each cell
areaCoversPerc <- areaCovers %>%
  gather(key, val, vaatmark_pop, aapne_pop, semi_pop, vaatmark_nin, aapne_nin, semi_nin, lidarCover, skog) %>%
  mutate(type = ifelse(str_detect(key, 'pop'), 'pop', 
                       ifelse(str_detect(key, 'nin'), 'nin', 
                              ifelse(key == 'lidarCover', 'lidar', NA)))) %>%
  mutate(ecosystem = ifelse(str_detect(key, 'aapne'), 'Naturlig åpne', 
                       ifelse(str_detect(key, 'vaatmark'), 'Våtmark', 
                              ifelse(str_detect(key, 'semi'), 'Semi-naturlig',NA)))) %>%
  mutate(areaPerc = val/land*100,
         areaPerc = ifelse(is.na(areaPerc), 0, areaPerc)) %>%
  dplyr::select(SSBID, key, type,ecosystem, areaPerc)
```

Import the CSV files generated in GEE of vegetation heights (circa 15 min runtime):

```{r}

ecosysttypes <- c("vaatmark", "aapne", "semi")

if (runFromScratch){
  
  for(i in 1:length(ecosysttype)){
    
    ecosysttype <- ecosysttypes[i]
    
    # Import median LiDAR heights for NiN polygons
    refVaatmarkRaw <- readVegHeightFiles('vaatmark_ref') %>%
    mutate(ref = chm) %>%
    dplyr::select(-'.geo', -'system:index', -chm)
    
    # Add region and veg/clim zones and summarise per strata
    # this will form the upper limit of the ecological condition score (ie. good condition)
  refVaatmark <- cleanRegClim(refVaatmarkRaw) %>%
    group_by(region, vegClimZoneLab) %>%
    summarise(ref = mean(ref, na.rm=T))
  
  # Export to file for reference
  refVaatmark %>%
    st_write('../data/refVaatmark.csv')
    
  # Import median LiDAR heights for AR5 polygons for population measurement
  popVaatmarkHt <- readVegHeightFiles('vaatmark_pop')  %>%
    mutate(pop = chm)%>%
    dplyr::select(-chm)
  
  # Turn into spatial objects using the .geo column in the CSV
  popVaatmarkHt <- st_as_sf(bind_cols(popVaatmarkHt,geojsonsf::geojson_sf(popVaatmarkHt$.geo)))
  
   # Import median LiDAR heights for forest (skog) within 200m of population polygons
    # this will form the lower limit of the ecological condition score (ie. poor condition)
  popVaatmarkSkog <- readVegHeightFiles('vaatmark_skog') %>%
    mutate(skog = chm)%>%
    dplyr::select(-chm, -'.geo', -ssbid)
  
  # Combine the population heights with the forest heights
  popVaatmark <- popVaatmarkHt %>%
    left_join(popVaatmarkSkog, by = 'system:index')%>%
    dplyr::select(-'.geo')
  
   # Add region and veg/clim zones to the combined population and forest heights
  popVaatmark <- cleanRegClim(popVaatmark)
  
  # Get regional reference values for forest height
    # this is to fill in for population polygons which did not have any forest within 200m
  vaatmarkSkogRegionalRef <- popVaatmark %>%
    as_tibble() %>%
    group_by(region, vegClimZoneLab) %>%
    summarise(skogFill = mean(skog, na.rm=TRUE)) %>%
    drop_na(skogFill)
  
  # Combine all the above into one data frame
  #set.seed(123)
  vaatmarkHts <- popVaatmark %>%
    #sample_n(100000) %>%
    as_tibble() %>% dplyr::select(-geometry) %>%
    left_join(refVaatmark, by=c('vegClimZoneLab', 'elevation')) %>%
    gather(type, height, ref, pop, skog) %>%
    group_by(`system:index`, region, vegClimZoneLab, type) %>%
    summarise(height = mean(height)) %>%
    pivot_wider(values_from = height, names_from = type) %>%
    # If population height is less than the reference value, then it is automatically "good" condition - ie. it inherits the reference height so that the rescaled value will be 1
    mutate(pop = ifelse(pop < ref, ref, pop)) %>%
    drop_na(pop, ref) %>%
    left_join(vaatmarkSkogRegionalRef, by = c('vegClimZoneLab', 'elevation')) %>%
    mutate(skog = ifelse(is.na(skog), skogFill, skog)) %>%
    dplyr::select(-skogFill) %>%
    filter(skog < 30)
  #colSums(is.na(vaatmarkHts))
  
  }
  
  
  
  
  # Import median LiDAR heights for NiN polygons
  refVaatmarkRaw <- readVegHeightFiles('vaatmark_ref') %>%
    mutate(ref = chm) %>%
    dplyr::select(-'.geo', -'system:index', -chm)
  refAapneRaw <- readVegHeightFiles('aapne_ref') %>%
    mutate(ref = chm) %>%
    dplyr::select(-'.geo', -'system:index', -chm)
  refSemiRaw <- readVegHeightFiles('semi_ref') %>%
    mutate(ref = chm) %>%
    dplyr::select(-'.geo', -'system:index', -chm)
  
  # Add region and veg/clim zones and summarise per strata
    # this will form the upper limit of the ecological condition score (ie. good condition)
  refVaatmark <- cleanRegClim(refVaatmarkRaw) %>%
    group_by(region, vegClimZoneLab) %>%
    summarise(ref = mean(ref, na.rm=T))
  refAapne <- cleanRegClim(refAapneRaw) %>%
    group_by(region, vegClimZoneLab) %>%
    summarise(ref = mean(ref, na.rm=T))
  refSemi <- cleanRegClim(refSemiRaw) %>%
    group_by(region, vegClimZoneLab) %>%
    summarise(ref = mean(ref, na.rm=T))
  
  # Export to file for reference
  refVaatmark %>%
    st_write('../data/refVaatmark.csv')
  refAapne %>%
    st_write('../data/refAapne.csv')
  refSemi %>%
    st_write('../data/refSemi.csv')
  
  # Import median LiDAR heights for AR5 polygons for population measurement
  popVaatmarkHt <- readVegHeightFiles('vaatmark_pop')  %>%
    mutate(pop = chm)%>%
    dplyr::select(-chm)
  popAapneHt <- readVegHeightFiles('aapne_pop')  %>% ## All SSB ruter not around Oslofjorden will give empty results here
    mutate(pop = chm)%>%
    dplyr::select(-chm)
  popSemiHt <- readVegHeightFiles('semi_pop')  %>%
    mutate(pop = chm)%>%
    dplyr::select(-chm)
  
  # Turn into spatial objects using the .geo column in the CSV
  popVaatmarkHt <- st_as_sf(bind_cols(popVaatmarkHt,geojsonsf::geojson_sf(popVaatmarkHt$.geo)))
  popAapneHt <- st_as_sf(bind_cols(popAapneHt,geojsonsf::geojson_sf(popAapneHt$.geo)))
  popSemiHt <- st_as_sf(bind_cols(popSemiHt,geojsonsf::geojson_sf(popSemiHt$.geo)))

  # Import median LiDAR heights for forest (skog) within 200m of population polygons
    # this will form the lower limit of the ecological condition score (ie. poor condition)
  popVaatmarkSkog <- readVegHeightFiles('vaatmark_skog') %>%
    mutate(skog = chm)%>%
    dplyr::select(-chm, -'.geo', -ssbid)
  popAapneSkog <- readVegHeightFiles('aapne_skog') %>%
    mutate(skog = chm)%>%
    dplyr::select(-chm, -'.geo', -ssbid)
  popSemiSkog <- readVegHeightFiles('semi_skog') %>%
    mutate(skog = chm)%>%
    dplyr::select(-chm, -'.geo', -ssbid)
  
  # Combine the population heights with the forest heights
  popVaatmark <- popVaatmarkHt %>%
    left_join(popVaatmarkSkog, by = 'system:index')%>%
    dplyr::select(-'.geo')
  popAapne <- popAapneHt %>%
    left_join(popAapneSkog, by = 'system:index')%>%
    dplyr::select(-'.geo')
  popSemi <- popSemiHt %>%
    left_join(popSemiSkog, by = 'system:index')%>%
    dplyr::select(-'.geo')
  
  # Add region and veg/clim zones to the combined population and forest heights
  popVaatmark <- cleanRegClim(popVaatmark)
  popAapne <- cleanRegClim(popAapne)
  popSemi <- cleanRegClim(popSemi)

  # Get regional reference values for forest height
    # this is to fill in for population polygons which did not have any forest within 200m
  vaatmarkSkogRegionalRef <- popVaatmark %>%
    as_tibble() %>%
    group_by(region, vegClimZoneLab) %>%
    summarise(skogFill = mean(skog, na.rm=TRUE)) %>%
    drop_na(skogFill)
  aapneSkogRegionalRef <- popAapne %>%
    as_tibble() %>%
    group_by(region, vegClimZoneLab) %>%
    summarise(skogFill = mean(skog, na.rm=TRUE)) %>%
    drop_na(skogFill)
  semiSkogRegionalRef <- popSemi %>%
    as_tibble() %>%
    group_by(region, vegClimZoneLab) %>%
    summarise(skogFill = mean(skog, na.rm=TRUE)) %>%
    drop_na(skogFill)
  
  # Combine all the above into one data frame
  #set.seed(123)
  vaatmarkHts <- popVaatmark %>%
    #sample_n(100000) %>%
    as_tibble() %>% dplyr::select(-geometry) %>%
    left_join(refVaatmark, by=c('vegClimZoneLab', 'elevation')) %>%
    gather(type, height, ref, pop, skog) %>%
    group_by(`system:index`, region, vegClimZoneLab, type) %>%
    summarise(height = mean(height)) %>%
    pivot_wider(values_from = height, names_from = type) %>%
    # If population height is less than the reference value, then it is automatically "good" condition - ie. it inherits the reference height so that the rescaled value will be 1
    mutate(pop = ifelse(pop < ref, ref, pop)) %>%
    drop_na(pop, ref) %>%
    left_join(vaatmarkSkogRegionalRef, by = c('vegClimZoneLab', 'elevation')) %>%
    mutate(skog = ifelse(is.na(skog), skogFill, skog)) %>%
    dplyr::select(-skogFill) %>%
    filter(skog < 30)
  #colSums(is.na(vaatmarkHts))
  

  aapneHts <- popAapne %>%
    #sample_n(100000) %>%
    as_tibble() %>% dplyr::select(-geometry) %>%
    left_join(refAapne, by=c('vegClimZoneLab', 'region')) %>%
    gather(type, height, ref, pop, skog) %>%
    group_by(`system:index`, elevation, vegClimZoneLab, type) %>%
    summarise(height = mean(height)) %>%
    pivot_wider(values_from = height, names_from = type) %>%
    # If population height is less than the reference value, then it is automatically "good" condition - ie. it inherits the reference height so that the rescaled index will be 1
    mutate(pop = ifelse(pop < ref, ref, pop)) %>%
    drop_na(pop, ref) %>%
    left_join(aapneSkogRegionalRef, by = c('vegClimZoneLab', 'region')) %>%
    mutate(skog = ifelse(is.na(skog), skogFill, skog)) %>%
    dplyr::select(-skogFill) %>%
    filter(skog < 30)
  #colSums(is.na(aapneHts))
  
semiHts <- popSemi %>%
    #sample_n(100000) %>%
    as_tibble() %>% dplyr::select(-geometry) %>%
    left_join(refSemi, by=c('vegClimZoneLab', 'region')) %>%
    gather(type, height, ref, pop, skog) %>%
    group_by(`system:index`, region, vegClimZoneLab, type) %>%
    summarise(height = mean(height)) %>%
    pivot_wider(values_from = height, names_from = type) %>%
    # If population height is less than the reference value, then it is automatically "good" condition - ie. it inherits the reference height so that the rescaled index will be 1
    mutate(pop = ifelse(pop < ref, ref, pop)) %>%
    drop_na(pop, ref) %>%
    left_join(semiSkogRegionalRef, by = c('vegClimZoneLab', 'region')) %>%
    mutate(skog = ifelse(is.na(skog), skogFill, skog)) %>%
    dplyr::select(-skogFill) %>%
    filter(skog < 30)
  #colSums(is.na(semiHts))
  
} else {
  
  refVaatmark  <- read_csv('../data/refVaatmark.csv')
  refAapne <- read_csv('../data/refAapne.csv')
  refSemi <- read_csv('../data/refSemi.csv')

}

```

```{r ref-open-enc, fig.cap="Reference vegetation height in natural open ecosystems under the forest line in Norway."}
refAapne %>%
  mutate(regions = factor(regions),
         vegClimZoneLab = factor(vegClimZoneLab)) %>%
  ggplot(aes(x = regions, y = ref))+
  geom_bar(stat="identity")+
  theme_bw(base_size = 12)+
  theme(axis.text.x = element_text(angle = -45, vjust = 0.5, hjust = 0.2, size = 12))+
  facet_wrap(.~vegClimZoneLab)+
  labs(y = "Reference vegetation height (m)",
       x = "Elevation (meters above sea level)")
```

```{r ref-wet-enc, fig.cap="Reference vegetation height in wetland ecosystems under the forest line in Norway."}
refVaatmark %>%
  mutate(region = factor(region),
         vegClimZoneLab = factor(vegClimZoneLab)) %>%
  ggplot(aes(x = region, y = ref))+
  geom_bar(stat="identity")+
  theme_bw(base_size = 12)+
  theme(axis.text.x = element_text(angle = -45, vjust = 0.5, hjust = 0.2, size = 12))+
  facet_wrap(.~vegClimZoneLab)+
  labs(y = "Reference vegetation height (m)",
       x = " ")
```

```{r ref-semi-enc, fig.cap="Reference vegetation height in semi-natural ecosystems under the forest line in Norway."}
refSemi %>%
  mutate(region = factor(region),
         vegClimZoneLab = factor(vegClimZoneLab)) %>%
  ggplot(aes(x = region, y = ref))+
  geom_bar(stat="identity")+
  theme_bw(base_size = 12)+
  theme(axis.text.x = element_text(angle = -45, vjust = 0.5, hjust = 0.2, size = 12))+
  facet_wrap(.~vegClimZoneLab)+
  labs(y = "Reference vegetation height (m)",
       x = " ")
```

## 8. Spatial units

<!--# Describe the spatial units that you rely on in your analyses. Highlight the spatial units (the resolution) that the indicator values should be interpretted at. Potential spatial delineation data should eb introduced under 7.1. Datasets. We recomend using the SEEA EA terminology opf Basic Spatial Units (BSU), Ecosystem Asses (EA) and Ecosystem Accounting Area (EAA). -->

## 9. Analyses

<!--# Use this header for documenting the analyses. Put code in seperate code chunks, and annotate the code in between using normal text (i.e. between the chunks, and try to avoid too many hashed out comments inside the code chunks). Add subheaders as needed. -->

## 10. Results

<!--# Repeat the final results here. Typically this is a map or table of indicator values.-->

## 11. Export file

<!--# Display the code (don't execute it) or the workflow for exporting the indicator values to file. Ideally the indicator values are exported as a georeferenced shape or raster file with indicators values, reference values and errors. You can also chose to export the raw (un-normalised or unscaled variable) as a seperate product. You should not save large sptaial output data on GitHub. You can use eval=FALSE to avoid code from being executed (example below - delete if not relevant) -->

```{r export}
#| eval: false
```
